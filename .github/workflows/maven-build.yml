# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-maven

name: Build the Spring Pet Clinic with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      IMAGE_NAME: spring-pet-clinic-maven
      IMAGE_VERSION: 1.0.1
      ARTIFACTORY_HOST: ${{ secrets.ARTIFACTORY_HOST }}
      ARTIFACTORY_CONTAINER_REPO: ${{ secrets.ARTIFACTORY_CONTAINER_REPO }}
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
      
      - name: Create a settings.xml for Maven
        run: |
          mkdir -p $HOME/.m2
          echo "<settings>
            <servers>
              <server>
                <id>aaron-maven</id>
                <username>${{ secrets.ARTIFACTORY_USER }}</username>
                <password>${{ secrets.ARTIFACTORY_PASSWORD }}</password>
              </server>
              <server>
                <id>aaron-spring-snapshot</id>
                <username>${{ secrets.ARTIFACTORY_USER }}</username>
                <password>${{ secrets.ARTIFACTORY_PASSWORD }}</password>
              </server>
              <server>
                <id>aaron-spring-milestone</id>
                <username>${{ secrets.ARTIFACTORY_USER }}</username>
                <password>${{ secrets.ARTIFACTORY_PASSWORD }}</password>
              </server>
            </servers>
          </settings>" > $HOME/.m2/settings.xml
          
      - name: Build with Maven Wrapper
        run: ./mvnw -B verify
        
      - name: Log in to JFrog Container Registry
        run: |
          echo "${ARTIFACTORY_PASSWORD}" | docker login ${ARTIFACTORY_HOST} \
            --username "${ARTIFACTORY_USER}" --password-stdin

      - name: Build image with Spring Boot
        run: |
          ./mvnw spring-boot:build-image \
            -Dspring-boot.build-image.imageName=${ARTIFACTORY_HOST}/${ARTIFACTORY_CONTAINER_REPO}/${IMAGE_NAME}:${IMAGE_VERSION}

      - name: Push image to JFrog
        run: |
          docker push ${ARTIFACTORY_HOST}/${ARTIFACTORY_CONTAINER_REPO}/${IMAGE_NAME}:${IMAGE_VERSION}
